6번째 수업에서는 객체지향 프로그래밍 기본에 대해 학습하였습니다.



Muscian은 실제로 인스턴스를 생성할 수는 없다. 
이는 파생 클래스의 기본 클래스가 되기 위해서만 존재하며, 이와 같은 클래스를 추상 클래스라 한다.


인터페이스는 동일한 동작에 대한 타입 정의에 사용됨
추상 클래스는 구현을 상속해주기 위해 사용됨




<객체(object)란?>
- 클래스의 인스턴스
- 객체의 세 가지 특징
    - Identity(ID): 한 객체는 



<추상화(Abstraction)>
- 추상화는 불필요한 것을 선택하고 제거하는 것
    - 어떤 것이 중요하고 어떤 것이 중요하지 않은 지에 대한 판단
    - 어떤 것이 중요한지에 대해 초점을 맞추고 판단
    - 어떤 것이 신뢰할 수 없고 필요 없는지에 대한 판단
    - 캡슐화는 추상화의 강력한 도구

추상화의 목적은 모호한 것을 만드는 것이 아니라 절대적으로 정확한 새로운 것을 만드는 것


1. 추상화에 대해 설명하고 소프트웨어 엔지니어링에서 추상화가 왜 중요한지 설명하세요.
2. 캡슐화의 두 원칙은 무엇입니까>
3. 객체지향 프로그래밍 관점에서 상속(Inheritance)를 설명하세요.
4. 다형성이란 무엇입니까? 이것이 이른 바인딩과 늦은 바인딩에 어떻게 연관됩니까?
5. 인터페이스, 추상 클래스, 콘크리트 클래스에 대해 비교 설명하세요.



<상속 (Inheritance)>
- 상속은 "is a kind of" 관계를 지정
    - 상속은 클래스 사이의 관계
    - 파생된 클래스는 존재하는 클래스에서 전문화됨

<클래스 계층구조>
- 상속과 관련된 클래스는 클래스 계층 구조를 형성


<추상 클래스>
- 파생되는 클래스의 기본 클래스가 되기 위해서만 존재
    - 이런 종류의 클래스 인스턴스를 만드는 것은 의미가 없음
    - 이런 클래스를 추상 클래스(abstract class)라고 부름

추상 클래스(abstract class)와 인터페이스(Interface)는 인스턴스화 할 수 없다는 점에서 비슷합니다.
차이점은 인터페이스는 타입 정의를 위해 사용되고, 추상 클래스는 타입의 행위(Behavior)를 위해 사용된다는 점입니다.
초기의 인터페이스는 구현을 위한 어떠한 종류의 구현을 포함하는 것을 허용하지 않았습니다.
추상 클래스는 멤버를 포함할 수 있습니다.












토이스토리2에서 30초 가량의 인물들의 대화를 객체지향을 통해서 출력할 수 있도록 만드는 과제가 제시되었습니다.





main 메소드는 static(정적 메소드)이므로 JVM이 동작하면서 클래스 로딩 시 메모리에 올라간다
dynamic(동적 메소드)는 해당 클래스가 객체로써 메모리에 올라가야만 호출할 수 있습니다