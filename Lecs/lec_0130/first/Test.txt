
NHN Academy에서 주관하는 Advanced Java 과정에 대한 학습을 진행합니다.

복습 차원에서 해당하는 내용에 대한 정리를 목표로 합니다.

​

여덟 번째 수업에서는 총 3가지 모듈에 대해 학습했습니다.

객체 생성과 제거, Java에서의 상속, 제네릭스가 해당 학습 모듈들입니다.


<객체 생성>

1단계: 메모리 할당

- new 키워드를 사용하여 Heap 영역에 메모리 할당

2단계: 생성자를 사용하여 객체 초기화

- 클래스 이름과 괄호를 사용


<기본 생성자 사용>

클래스에 직접 작성하지 않으면 기본 생성자 됨.

- public 접근 제한

- 클래스와 이름이 같음

- return 타입이 없음 (void가 아님)

- 파라미터가 없음

- 모든 필드는 기본값으로 초기화

생성자 구문


class Date {

public Date() { ... }

}


<기본 생성자 오버라이딩>

많은 경우 기본 생성자는 객체 초기화에 적당하지 않음

상속되는 기본 생성자 대신 객체만의 기본 생성자를 정의


<생성자 오버로딩>

생성자는 메소드이므로, 오버로딩 할 수 있음

- 같은 범위, 같은 이름, 다른 파라미터를 사용하여 정의

- 객체가 다른 방법으로 초기화 되는 것을 허용

주의

- 생성자를 정의하면, 컴파일러는 기본 생성자를 정의하지 않음


<초기자 목록>

오버로드 된 생성자는 같은 코드를 포함할 가능성이 높음

- 생성자를 서로 호출하도록 리팩토링

- this 키워드를 사용하여 초기화 목록을 호출


<상수 선언>

상수는 컴파일(런타임)시에 초기화 됨

final 키워드를 사용하여 선언


<private 생성자>

private 생성자는 직접 생성을 원하지 않는 객체 생성을 막아줌

- 인스턴스 메소드 호출을 막는 경우의 클래스

- static 메소드의 호출만을 위한 클래스

- 공유 객체를 위한 데이터를 저장하는 클래스

절차적 기능을 공유하는 유용한 방법


public class AccountFactory {
    private int accountNumber;
    private static  AccountFactory factory; 

    private AccountFactory() {}

    public static AccountFactory getFactory() {
        if (factory == null) {
            factory = new AccountFactory();
        }
        return factory;
    }

    public int getAccountNumber() {
        return this.accountNumber++;
    }
}

class Bank {
    public static void main(String[] args) {
        AccountFactory accountFactory = AccountFactory.getFactory();
        int accountNumber = accountFactory.getAccountNumber();
        int accountNumber2 = accountFactory.getAccountNumber();
        System.out.println(accountNumber);
        System.out.println(accountNumber2);
    }
}

내용을 입력하세요.

<static 생성자>

static 생성자는 객체 인스턴스가 생성되기 전에 동작됨

- static 필드를 초기화 함

Java는 static 생성자를 지원하지 않음


이후 객체 생성 예제에 대한 실습을 진행하였습니다.

이전에 실습하였던 BankAccount 예제에 대해서 enum 타입으로 AccountType을 생성하고, 3가지 생성자를 추가하여 코드를 수정하였습니다.

이전의 계좌 번호 및 인스턴스 변수를 채우는 메소드를 제거하고 BankAccount 객체가 생성될 때 사용할 수 있는 생성자로 변경합니다.


public enum AccountType {
    Checking,
    Deposit,
    Saving;
}
내용을 입력하세요.

import java.math.*;
import java.util.Scanner;

public class BankAccount {
    private long accountNumber;
    private String ownerName;
    private BigDecimal balance;
    AccountType accountType;

    private static long nextAccountNumber;

    public BankAccount() {
        this.accountNumber = nextNumber();
        this.accountType = accountType.Checking;
        this.balance = new BigDecimal("0");
    }
    
    public BankAccount(AccountType accountType) {
        this.accountNumber = nextNumber();
        this.ownerName = "UnKnown";
        this.accountType = accountType;
        this.balance = new BigDecimal("0");
    } 

    public BankAccount(String ownerName, BigDecimal balance) {
        this.accountNumber = nextNumber();
        this.ownerName = ownerName;
        this.accountType = AccountType.Checking;
        this.balance = balance;
    }     

    public BankAccount(String ownerName, AccountType accountType, BigDecimal balance) {
        this(ownerName, balance);
        this.accountType = accountType;
    }
    
    private static long nextNumber() {
        return nextAccountNumber++;
    }

    public void setData(String ownerName, BigDecimal balance) {
        this.accountNumber = nextNumber();
        this.ownerName = ownerName;
        this.balance = balance;
    }
        
    public long getNumber() {
        return this.accountNumber;
    }
        
    public String getOwnerName() {
        return this.ownerName;
    }
        
    public BigDecimal getBalance() {
        return this.balance;
    }

    public AccountType getAccountType() {
        return this.accountType;
    }
    
    public BigDecimal deposit(BigDecimal amount) {
        this.balance = this.balance.add(amount);
        return this.balance;
    }

    public boolean withDraw(BigDecimal amount) {
        if (amount.compareTo(this.balance) == 1 || amount.compareTo(this.balance) == 0) {
            return false;
        }
        else {
            balance = balance.subtract(amount);
            return true;
        }
    }

    public void transferFrom(BankAccount accFrom, BigDecimal amount) {
        if (accFrom.withDraw(amount)) {
            this.deposit(amount);
        }
    }

}

class CreateAccount {
    /*
    public static BankAccount createNewBankAccount(String ownerName, BigDecimal balance) {
        BankAccount newAccount = new BankAccount();
        newAccount.setData(ownerName, balance);

        return newAccount;
    }
    */

    public static void TestDeposit(BankAccount account) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter amount to deposit: ");
        BigDecimal amount = new BigDecimal(scanner.next());
        account.deposit(amount);
        scanner.close();
    }

    public static void TestWithDraw(BankAccount account) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter amount to withdraw: ");
        BigDecimal amount = new BigDecimal(scanner.next());
        if(!account.withDraw(amount)) {
            System.out.println("Insufficient funds!");
        }
        scanner.close();
    }

    public static void main(String[] args) {
        BankAccount bankAccount = new BankAccount(AccountType.Checking);
        BankAccount bankAccount2 = new BankAccount("NGS", new BigDecimal("500000000"));
        BankAccount bankAccount3 = new BankAccount("NGS", AccountType.Saving, new BigDecimal("10000000000"));

        printBankAccount(bankAccount);
        printBankAccount(bankAccount2);
        printBankAccount(bankAccount3);
    }

    public static void printBankAccount(BankAccount account) {
        System.out.println("Account Number: " + account.getNumber());
        System.out.println("Owner Name: " + account.getOwnerName());
        System.out.println("Account Type: " + account.getAccountType());
        System.out.println("Balance: " + account.getBalance() + "\n");
    }
}
내용을 입력하세요.

<객체 생명주기>

객체 생성

- new 키워드를 사용하여 메모리에 객체 할당

- 생성자를 사용하여 메모리에서 객체 초기회

객체 사용

- 메소드 호출 등

객체 제거

- 원시 메모리 회수

- 메모리 할당 해제


<객체와 범위>

지역 값(Local value)의 수명은 선언된 범위에 연결됨

- 일반적으로 짧은 수명

- 결정론적인 생성과 소멸

동적 객체(Dynamic object)의 수명은 해당 범위에 연결되지 않음

- 보다 긴 수명

- 소멸 시기가 명확히 결정되지 않음


<가비지 컬렉션>

객체는 명시적으로 소멸시킬 수 없음

- Java는 객체 생성 키워드와 반대의 동작을 하는 키워드(delete 등)가 없음

- 명시적 삭제 기능은 다른 언어에서 치명적 오류의 주요 원인이 됨

가비지 컬렉션이 프로그래머를 대신하여 객체를 제거

- 도달할 수 없는 객체를 찾아 자동으로 제거

- 사용하지 않는 Heap 메모리로 되돌리고(메모리를 반환하고) 마무리함

- 일반적으로 메모리가 부족할 때 가비지 컬렉션 작업을 수행


이어서 Java에서의 상속에 대해 학습하였습니다.


<클래스 확장>

한 클래스에서 파생되는 클래스를 생성

파생되는 서브 클래스는 슈퍼 클래스의 대부분의 요소를 상속함 (복제본을 가진다)

파생되는 서브 클래스는 슈퍼 클래스보다 낮은 가시성을 가질 수 없음


<슈퍼 클래스 멤버에 액세스>

protected 멤버는 암시적으로 파생된 클래스에 상속됨

파생된 클래스의 메소드에서 상속된 protected 멤버에 액세스 할 수 있음


<슈퍼 클래스 생성자 호출>

생성자는 반드시 super 키워드를 사용해서 호출

private 생성자는 파생 클래스에서 액세스 할 수 없음

super 키워드로 식별자 범위 한정


package third;

public class Test {
     
}

class Date {
    int year, month;
    String day;
    
    public Date() {
        
    }
    
    public Date(int year, int month, String day) {
        this.year = year;
        this.month = month;
        this.day = day;
}

class ExtendedDate extends Date {
    String dateName;

    public ExtendedDate(int year, int month, String day, String dateName) {
        super(year, month, day);
        this.dateName = dateName;
    }

}
내용을 입력하세요.

<가상 메소드 (Virtual Method)>

클래스 계층구조 내에서 같은 시그너처로 하위 클래스에서 오버라이딩 될 수 있는 메소드

객체지향 프로그래밍의 다형성에서 아주 중요한 부분

Java의 모든 메소드는 가상 메소드로 동작


<메소드 오버라이딩>

서브 클래스에서 슈퍼 클래스의 메소드와 같은 시그니처로 정의

서브 클래스에서 오버라이드하는 메소드는 슈퍼 클래스의 가상 메소드보다 낮은 가시성을 가질 수 없음


package second;

class A {
    public void doSomething() {
        System.out.println("A");
    }

    public void doFromA() {
        System.out.println("do From A");
    }
}

class B extends A {
    public void doSomething() {
        System.out.println("B");
    }
}

class C extends B {
    public void doSomething() {
        System.out.println("C");
    }
}

class D extends C {
    public void doSomething() {
        System.out.println("D");
    }
}

public class Test {
    public static void main(String[] args) {
        D d = new D();
        C c = d;
        B b = c;
        A a = b;

        d.doSomething();
        c.doSomething();
        b.doSomething();
        a.doSomething();
        a.doFromA();
        System.out.println(a.hashCode());
        System.out.println(b.hashCode());
    }
}
내용을 입력하세요.

<final 메소드>

final로 선언된 메소드는 서브 클래스에서 오버라이드 할 수 없음


<final 클래스>

슈퍼 클래스로 동작하도록 설계하지 않은 클래스를 파생하는 것은 위험할 수 있음

final로 선언된 클래스에서는 서브 클래스를 파생할 수 없음

Java의 String, StringBuilder등의 클래스는 final로 선언됨


<인터페이스 선언>

interface 키워드를 사용하여 선언


<다중 인터페이스 구현>

클래스는 하나 이상의 인터페이스를 구현할 수 있음

인터페이스는 하나 이상의 인터페이스를 확장할 수 있음

클래스는 인터페이스의 메소드를 반드시 구현해야 함


<인터페이스 메소드 구현>

구현되는 메소드는 인터페이스의 메소드와 시그니처가 같아야 함

구현 메소드 역시 가상 메소드로, 파생되는 클래스에서 오버라이드 할 수 없음

클래스에서 구현되는 메소드는 인터페이스의 추상 메소드보다 좁은 가시성을 가질 수 없음


package fourth;

interface BinaryOp {
    int apply(int right, int left);
}

interface Printable extends BinaryOp {
    void print();
}

class Adder implements BinaryOp, Printable {
    @Override
    public int apply(int right, int left) {
        return right + left;
    }

    @Override
    public void print() {
        System.out.println("Apply add!");
    }
}

class Multiplier implements BinaryOp {
    @Override
    public int apply(int right, int left) {
        return right * left;
    }
}

class Calculation {
    public static void main(String[] args) {
        BinaryOp binder = new Adder();
        BinaryOp binder2 = new Multiplier();

        System.out.println(binder.apply(1, 2));
        System.out.println(binder2.apply(1, 2));
        ((Printable) binder).print();

    }
}
내용을 입력하세요.

<인터페이스에서 메소드 구현>

인터페이스에 추상 메소드가 아닌 메소드를 작성할 수 있음

인터페이스를 구현하는 클래스에 상속됨

default 키워드 사용


<인터페이스에서 static 메소드 구현>

인터페이스에서 static 메소드를 구현 후 사용

호출 시 메소드의 전체 이름을 사용


<추상 클래스 선언>

클래스 인스턴스를 생성할 수 없음

선언이 아닌 구현(코드)을 상속하는 형태로 사용

abstract 키워드를 사용해서 선언


이전에도 학습했지만 인터페이스와 추상 클래스의 차이에 대해 살펴보겠습니다.


인터페이스는 같은 타입이 되기 위한 동작들을 정의합니다.

abstract 클래스는 move와 같은 동작을 정의하며, 상속하는 서브 클래스들에서 오버라이드가 가능합니다.


클래스 계층 구조에서 추상 클래스 사용에 대한 방법이 2가지 존재합니다.


위에서 말한 move와 같은 동작은 Moveable 인터페이스에 정의된 타입으로 볼 수 있습니다.

같은 타입(Moveable)이 되기 위한 동작은 move이며, 이를 추상 클래스 Unit에서 구현할 수 있습니다(Unit은 기본적으로 움직일 수 있다)


그리고 해당하는 추상 클래스를 Tank나 Medic 클래스가 상속하며, Unit 클래스에서 구현한 move 메소드는 가상 메소드이므로 각각의 서브 클래스(콘크리트 클래스)들에서 오버라이드 할 수 있습니다.


다른 방법으로는 Attackable 인터페이스가 존재할 수 있습니다. Tank는 공격이 가능하지만, Medic은 공격이 가능하지 않습니다.


따라서, 이전과 다르게 추상 클래스 Unit은 Attackable 인터페이스를 구현하지 않습니다.


각각의 서브 클래스인 Tank와 Medic은 이전과 동일하게 추상 클래스 Unit을 상속하며, Tank 클래스는 Attackable 인터페이스를 구현하지만 Medic 클래스는 해당 인터페이스를 구현하지 않습니다(해당 클래스 Medic은 Attackable이 불가능하므로 구현할 수 없습니다).


<추상 클래스와 인터페이스>

유사점

- 인스턴스화 될 수 없음

- 파생 방지(final)로 선언될 수 없음

차이점

- 인터페이스는 같은 타입으로서의 구현을 강제

- 추상 클래스는 데이터와 구현(코드)를 상속하고 확장을 유도

- 인터페이스는 인터페이스 외에는 확장할 수 없음


추가로 인터페이스는 추상 클래스와 다르게 객체 생성이 불가능합니다.

이는 메모리에 올라갈 수 없다는 것과 동일하게 해석할 수 있습니다.


<추상 메소드 구현>

추상 클래스에서 구현이 없는 메소드 선언

abstract 키워드 사용

추상 클래스에서만 추상 메소드를 선언할 수 있음


* abstract 키워드를 사용하여 추상 클래스에 추상 메소드를 추가할 수 있습니다. 추상 클래스에서 파생된 클래스는 추상 메소드를 반드시 구현해야 합니다.


상속을 사용하여 인터페이스 구현 예제에 대한 실습을 진행하였습니다.


interface BinaryOp {
    int apply(int left, int right);
}
내용을 입력하세요.

class Adder implements BinaryOp {
    @Override
    public int apply(int left, int right) {
        return left + right;
    }
}
내용을 입력하세요.

public class Multiplier implements BinaryOp {
    @Override
    public int apply(int left, int right) {
        return left * right;
    }
}
내용을 입력하세요.

public class Algorithm {
    static final int addFrom1To10 = 55;
    
    public static int sigma(int begin, int end, int step) {
        return accumulate(new Adder(), 0, begin, end, step); 
    }

    public static int pi(int begin, int end, int step) {
        return accumulate(new Multiplier(), 1, begin, end, step);
    }
    
    public static int accumulate(BinaryOp binaryOp, int init, int begin, int end, int step) {
        int result = init;
        for (int next = begin; next <= end; next += step) {
            result = binaryOp.apply(result, next);
        }
        return result;
    }
    
    public static void main(String[] args) {
        System.out.println(sigma(1, 10, 1));
        System.out.println(pi(1, 10, 1));
    }
}
내용을 입력하세요.
이전에 실습했던 코드에서 상속을 사용하여 인터페이스를 구현하고 클래스의 다형성을 구현하는 것을 실습하였습니다.


3번 이상의 반복 코딩을 통해서 본인의 것으로 만드는 과정을 거치도록 합시다.


여덟 번째 수업에서 본래의 과정에 대한 기본 학습은 모두 끝났습니다(자바 서적 1권)

총 4주차 과정에서 2주 가량이 남았고, 남은 이틀간 제네릭스, 어노테이션, 람다식까지 추가로 학습 후 시험을 진행한다고 합니다.


시험은 5시간이며, 이후에는 지금까지 배운 내용을 토대로 실습을 진행하는데, 자바 GUI를 학습하고 이를 통해 객체지향에 관련된 실습을 진행할 것으로 보입니다.


최종 시험은 2월 10일이며 6시간 진행됩니다.


따라서, 오늘 제네릭스를 어느정도 학습하였습니다.


제네릭스(Generics)


<제네릭스 개요>

객체 생성 시 부여되는 타입을 이용한 파라미터 다형성 구현

타입 또는 메소드에 정의


<걍럭한 타입 검사>

제네릭스는 타입 안정성을 지원

- 타입 파라미터를 통해 전달된 타입 정보를 이용하여 컴파일 타임에 검사

java.lang.Object 타입으로 변환되는 객체 형 변환은 런타임에 검사됨

- 컴파일시에 오류를 발견할 수 없음

- java.lang.ClassCastException 예외 발생

제네릭스는 타입이 명확히 명시되므로 컴파일 타임에 오류를 검출할 수 있음


타입 변환 감소에 대한 것은 이후 실습 예제를 통해서 자세히 살펴볼 수 있습니다.


<알고리즘 일반화 구현>

제네릭스는 알고리즘 일반화를 구현할 수 있도록 함

- 다양한 타입의 객체들을 다루는 메소드나 컬렉션 클래스에 컴파일 시 타입 체크를 가능하도록 함

- 타입 파라미터가 Compatable의 서브 타입이면 정렬 가능하도록 정의

- 비교 가능한 아이템의 경우 정렬이 가능하도록 선언하며, 특정 데이터 타입에 국한되지 않는 일반적인 알고리즘의 구현이 가능


<제네릭 타입 선언>

일반 타입 선언(클래스와 인터페이스)에 타입 파라미터를 추가한 형태로 사용

타입 파라미터는 클래스나 인퍼에시의 이름 뒤에 선언하며, <> 기호 사이에 열거됨

하나 이상의 타입 파라미터를 사용할 수 있음


<제네릭 타입 생성자>

제네릭 타입 생성자에서는 타입 파라미터를 사용하지 않음

일반 클래스의 생성자와 동일한 방법으로 생성자 선언


<제네릭 객체 생성>

제네릭 타입을 사용할 때는 타입 파라미터가 주어져야 함

참조 변수와 생성자에 주어지는 타입 파라미터는 동일해야 함

타입 파라미터의 상속 관계는 제네릭 타입 생성 시 영향을 주지 않음

- 타입 파라미터는 불공변성을 가짐

- 제네릭 타입의 상속 관계는 일반 상속관계와 동일하게 적용됨

타입 파라미터가 명확한 경우, 생성자 호출 시 전달되어야 하는 타입 변수는 생략 가능


<제네릭 메소드 선언>

일반 메소드 선언과 동일하며, 일반화 할 타입을 타입 파라미터로 선언

메소드 앞에 <>기호를 사용하여 타입 파라미터 목록을 선언


<타입 추론>

매소드 시그니처의 타입 파라미터는 호출 시 생략이 가능함

- 컴파일러에서 주어진 파라미터를 통해 적용될 타입의 추론이 가능함

하나의 타입 파라미터에 대해 추정되는 타입이 2개 이상 존재할 경우 오류 발생


<타입 파라미터 명명 규칙>

타입 파라미터 명명 권장 사항

- E : 요소

- K : 키

- N : 숫자

- T : 타입

- V : 값

- S, U, V 등 : 2번째, 3번째, 4번째 등


<다중 타입 파라미터>

파라미터에는 하나 이상의 타입을 지정할 수 있음

다중 파라미터 타입도 타입 인자를 통해 타입 파라미터의 추론이 가능한 경우, 생성자에서 타입 인수의 생략이 가능함


<타입 제한>

타입 파라미터로 전달 가능한 인수는 참조 타입, 즉 클래스나 인터페이스로 제한됨

int, boolean 등 기본 데이터 타입을 사용해야 하는 경우 Wrapper 클래스를 사용


<상속 및 서브타입>

타입 파라미터의 상속 관계는 제네릭 타입의 상속과 무관함

제네릭 파라미터로 지정된 타입 인스턴스의 동작은 공변적

타입 파라미터는 반공변적

제네릭 클래스의 확장

- 타입 파라미터를 변경하지 않는 한 서브 타입 지정 관계가 유지됨


제네릭을 학습하기 이전에 Stack 예제를 통해서 이에 대한 실습을 진행하였습니다.


package fifth;

interface Stackable<T> {
    void push(T i);
    T pop();
}
내용을 입력하세요.

package fifth;

public class Stack<T> implements Stackable<T> {
    Object[] items;
    int lastIndex = 0;
    
    public Stack(int size) {
        this.items = new Object[size];
    }
    
    @Override
    public void push(T i) {
        this.items[lastIndex++] = (T)i;
    }

    @Override
    public T pop() {
        return (T)items[--lastIndex];
    }
    
}

class TypeMain {

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<Integer>(3); 
        Stack<String> stack2 = new Stack<String>(3);

        stack.push(2);
        stack.push(2);
        stack.push(3);
        stack.pop();
        stack.pop();
        stack.pop();
    
        stack2.push("NGS");
        stack2.push("CMS");
        stack2.push("HDH");
        stack2.pop();
        stack2.pop();
        stack2.pop();

    }

}
내용을 입력하세요.
제네릭 타입으로 인터페이스를 생성하고 스택의 연산인 pop과 push를 정의합니다.


해당 Stack 클래스에서 Stackable 인터페이스를 구현할 수 있도록 하고 모든 클래스의 기본 클래스인 Object 타입으로 items 배열을 선언합니다.


스택은 LIFO(후입선출)이므로 마지막 인덱스에 대한 변수 lastIndex를 선언합니다.


정수형 변수 size를 파라미터로 받는 생성자를 하나 생성하고 해당 객체의 items 배열에 새로운 Object 타입 배열을 생성합니다.


main 메소드에서 객체 생성 후 호출 시, 일반적으로 오류가 발생할 수 있습니다.

이는 인덱스에 관한 문제인데, push() 또는 pop() 중에서 한가지 발생할 수 있으며, 인덱스 변수의 초기화 값과 관련됩니다.


해당 코드에서는 0으로 마지막 인덱스를 지정해주었고, 이것은 3번의 push()과정에서 문제가 없습니다.

다만 마지막 push()를 진행 후, 해당 객체의 연산에서 items의 배열 내 lastIndex 변수가 후행 연산으로 ++가 진행되므로 배열의 마지막 인덱스는 3을 가리키게 됩니다(0, 1, 2, 3).


따라서, 이후 pop() 메서드 호출 시, lastIndex가 존재하지 않는 배열의 인덱스 3에서 시작하므로 오류를 발생하게 됩니다(pop() 메소드에서 배열 인덱스에 대해 후행 연산을 진행했을 시).


따라서 이를 위해, 선행 연산으로 인덱스를 낮춘 후 진행한다면 pop() 메소드에서도 문제는 발생하지 않으며, 이를 제네릭 타입 T로 형 변환 후 return 할 수 있습니다.


main에서 객체를 생성 시 자신이 원하는 형으로 직접 생성할 수 있으며, 이는 push()나 pop() 메소드에서 해당 형에 맞게 변환되어 연산을 진행합니다.


마지막으로, 금일 수업에서 두 가지 서적을 추천받았으며 다음과 같습니다.


Effective Java

UML 객체지향 설계


﻿